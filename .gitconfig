[alias]

	# ================ #
	# NATIVE SHORTCUTS #
	# ================ #

	# Keystroke Savers
	s               = status -s
	st              = status
	co              = checkout
	fa              = fetch --all
	ft              = fetch --tags
	line            = log --pretty=format:'%Cred%h%Creset %C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

	# Committing Shortcuts
	amend           = commit --amend
	recommit        = commit --amend --no-edit
	uncommit        = reset --soft HEAD^
	# Save and list working tree snapshots.
	snapshot        = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
	snapshots       = !git stash list --grep snapshot
	recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

	# Rebase Shortcuts
	continue        = rebase --continue
	skip            = rebase --skip
	abort           = rebase --abort
	# Prepush opens up an interactive rebase for all the changes that haven't
	# been pushed to the remote upstream branch yet.
	prepush         = rebase -i @{u}
	# If the current working tree is clean, then pull the latest "develop" and
	# rebase it into the current branch.
	getdev          = "!([ $(git diff-files | wc -l) -eq 0 ] || (echo 'Working directory not clean. Aborting.'; return 1)) && git checkout develop && git pull origin develop && git checkout - && git rebase develop"

	# Assume (and its counterpart unassume) will "assume" files haven't changed.
	# Use to prevent files from appearing in modified-files lists if they have
	# changed locally. Ideal for edits in configuration that shouldn't be committed.
	assume          = update-index --assume-unchanged
	unassume        = update-index --no-assume-unchanged
	# List assumed files
	assumed         = "!git ls-files -v | grep ^h | cut -c 3-"

	# Misc
	versions        = "!v() { git tag | grep \"^[vV]\\?[0-9.]\\+$\" | sort -V; }; v"

	# ================ #
	# EXTERNAL TOOLING #
	# ================ #

	# Git Appraise is a distributed code review system for git repos, by Google. If available on the $PATH there
	# is no need to add it as an alias. Install with "go get github.com/google/git-appraise/git-appraise" (Golang
	# tools required). Comment left as reminder.

	# Requires PHPCS; "composer global require squizlabs/php_codesniffer" (or cgr).
	sniff           = "!git diff --name-only | grep \\\\.php\\$ | xargs --no-run-if-empty phpcs -p -v --standard=PSR2"

[user]
	name            = Zander Baldwin
	email           = hello@zanderbaldwin.com
	signingkey      = 419CB27C
[push]
	default         = simple
	followTags      = true
[pull]
	rebase          = true
[pager]
	# "diff-highlight" isn't installed by default, you can find it in the
	# contrib section of the Git repo (requires Perl to be installed):
	# https://github.com/git/git/blob/master/contrib/diff-highlight/diff-highlight
	log             = diff-highlight | less --tabs=4 -RFX
	show            = diff-highlight | less --tabs=4 -RFX
	diff            = diff-highlight | less --tabs=4 -RFX
[interactive]
	diffFilter      = diff-highlight
[diff]
	compactionHeuristic = true
	algorithm           = patience
	mnemonicprefix      = true
[rerere]
	# Remember my merges
	# http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
	enabled         = true
[help]
	autocorrect     = 1
[core]
	excludesFile    = ~/.ignore

# Force Git to always download over SSH to prevent GitHub's API throttling and/or
# asking for username and password (which is near-to-impossible to do on the
# command-line if 2FA has been enabled).
[url "git@github.com:"]
	insteadOf       = https://github.com/
[merge]
	ff = only
